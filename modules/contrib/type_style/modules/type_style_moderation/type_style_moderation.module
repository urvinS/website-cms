<?php

/**
 * @file Hook implementations for the Type Style Moderation module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_type_style_entity_support().
 */
function type_style_moderation_type_style_entity_support() {
  return ['moderation_state', 'moderation_state_transition'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function type_style_moderation_form_workflow_state_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\content_moderation\ContentModerationState $state */
  $state = $form_state->get('state');
  $state_id = $state->id();

  /** @var \Drupal\workflows\WorkflowInterface $workflow */
  $workflow = $form_state->getFormObject()->getEntity();
  $type_plugin = $workflow->getTypePlugin();
  $config = $type_plugin->getConfiguration();
  $settings = isset($config['states'][$state_id]['type_style']) ? $config['states'][$state_id]['type_style'] : [];
  type_style_attach_to_form($form, $settings, 'State');
  array_splice($form['actions']['submit']['#submit'], 1, 0, ['type_style_moderation_form_workflow_state_edit_form_submit']);
}

/**
 * Form submit callback for the state edit form.
 */
function type_style_moderation_form_workflow_state_edit_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\content_moderation\ContentModerationState $state */
  $state = $form_state->get('state');
  $state_id = $state->id();

  /** @var \Drupal\workflows\WorkflowInterface $workflow */
  $workflow = $form_state->getFormObject()->getEntity();
  $type_plugin = $workflow->getTypePlugin();
  $config = $type_plugin->getConfiguration();
  $config['states'][$state_id]['type_style'] = $form_state->getValue('type_style', []);
  $type_plugin->setConfiguration($config);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function type_style_moderation_form_workflow_transition_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $transition_id = $form['id']['#value'];

  /** @var \Drupal\workflows\WorkflowInterface $workflow */
  $workflow = $form_state->getFormObject()->getEntity();
  $type_plugin = $workflow->getTypePlugin();
  $config = $type_plugin->getConfiguration();
  $settings = isset($config['transitions'][$transition_id]['type_style']) ? $config['transitions'][$transition_id]['type_style'] : [];
  type_style_attach_to_form($form, $settings, 'Transition');
  array_splice($form['actions']['submit']['#submit'], 1, 0, ['type_style_moderation_form_workflow_transition_edit_form_submit']);
}

/**
 * Form submit callback for the transition edit form.
 */
function type_style_moderation_form_workflow_transition_edit_form_submit(array &$form, FormStateInterface $form_state) {
  $transition_id = $form['id']['#value'];

  /** @var \Drupal\workflows\WorkflowInterface $workflow */
  $workflow = $form_state->getFormObject()->getEntity();
  $type_plugin = $workflow->getTypePlugin();
  $config = $type_plugin->getConfiguration();
  $config['transitions'][$transition_id]['type_style'] = $form_state->getValue('type_style', []);
  $type_plugin->setConfiguration($config);
}

/**
 * Helper function to grab a plugin style for a given workflow.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   A workflow entity, or an entity which has a workflow.
 * @param string $plugin
 *   The name of the workflow plugin (i.e. transitions/states).
 * @param string $plugin_id
 *   The workflow plugin ID (i.e. draft).
 * @param string $name
 *   The name of the style you want to get (i.e. color, icon).
 * @param mixed $default
 *   A default value in case the style is not set. Defaults to FALSE.
 *
 * @return mixed
 *   The style if set, or the default. This value is safe to use.
 */
function type_style_moderation_get_style(EntityInterface $entity, $plugin, $plugin_id, $name, $default = FALSE) {
  $styles = type_style_moderation_get_styles($entity, $plugin, $plugin_id);
  return isset($styles[$name]) ? $styles[$name] : $default;
}

/**
 * Helper function to grab all plugin styles for a given workflow.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   A workflow entity, or an entity which has a workflow.
 * @param string $plugin
 *   The name of the workflow plugin (i.e. transitions/states).
 * @param string $plugin_id
 *   The workflow plugin ID (i.e. draft).
 *
 * @return array
 *   An associative array of styles. Values are safe to use.
 */
function type_style_moderation_get_styles(EntityInterface $entity, $plugin, $plugin_id) {
  if ($entity->getEntityTypeId() === 'workflow') {
    $workflow = $entity;
  }
  elseif ($entity instanceof ContentEntityInterface && \Drupal::moduleHandler()->moduleExists('content_moderation')) {
    /** @var \Drupal\content_moderation\ModerationInformationInterface $information */
    $information = \Drupal::service('content_moderation.moderation_information');
    $workflow = $information->getWorkflowForEntity($entity);
  }

  if (!isset($workflow) || !$workflow) {
    return [];
  }

  $type_plugin = $workflow->getTypePlugin();
  $config = $type_plugin->getConfiguration();
  $styles = isset($config[$plugin][$plugin_id]['type_style']) ? $config[$plugin][$plugin_id]['type_style'] : [];
  return preg_replace('/[^a-zA-Z0-9\-\_\#]/', '', $styles);
}
